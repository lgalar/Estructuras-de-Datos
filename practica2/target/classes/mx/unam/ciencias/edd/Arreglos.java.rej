***************
*** 18,24 ****
       */
      public static <T> void
      quickSort(T[] arreglo, Comparator<T> comparador) {
          // Aquí va su código.
      }
  
      /**
--- 18,57 ----
       */
      public static <T> void
      quickSort(T[] arreglo, Comparator<T> comparador) {
+         quickSort(arreglo, comparador, 0, arreglo.length-1);
+     }
+ 
+     private static <T> void
+     quickSort(T[] arreglo, Comparator<T> comparador, int a, int b) {
          // Aquí va su código.
+         if (b <= a){ return;}
+         int i = a + 1;
+         int j = b;
+         while (i < j){
+             if (comparador.compare(arreglo[i], arreglo[a]) > 0 && comparador.compare(arreglo[j], arreglo[a]) <= 0){
+                 intercambia(arreglo, i, j);
+                 i++;
+                 j--;
+             }
+             else if (comparador.compare(arreglo[i], arreglo[a]) <= 0){
+                 i++;
+             }
+             else{
+                 j--;
+             }
+         }
+         if (comparador.compare(arreglo[i], arreglo[a]) > 0){
+             i--;
+         }
+         intercambia(arreglo, a, i);
+         quickSort(arreglo, comparador, a, i-1);
+         quickSort(arreglo, comparador, i+1, b);
+     }
+ 
+     private static <T> void intercambia(T[] arreglo, int i, int j){
+         T t = arreglo[i];
+         arreglo[i] = arreglo[j];
+         arreglo[j] = t;
      }
  
      /**
***************
*** 40,45 ****
      public static <T> void
      selectionSort(T[] arreglo, Comparator<T> comparador) {
          // Aquí va su código.
      }
  
      /**
--- 73,87 ----
      public static <T> void
      selectionSort(T[] arreglo, Comparator<T> comparador) {
          // Aquí va su código.
+         for (int i = 0; i < arreglo.length - 1; i++){
+             int m = i;
+             for (int j = i + 1; j < arreglo.length; j++){
+                 if (comparador.compare(arreglo[j],arreglo[m]) < 0){
+                     m = j;
+                 }
+             }
+             intercambia(arreglo, i, m);
+         }
      }
  
      /**
***************
*** 63,69 ****
       */
      public static <T> int
      busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
          // Aquí va su código.
      }
  
      /**
--- 105,125 ----
       */
      public static <T> int
      busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
+         return busquedaBinaria(arreglo, elemento, comparador, 0, arreglo.length-1);
+     }
+ 
+     private static <T> int
+     busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador, int a, int b) {
          // Aquí va su código.
+         if (b < a) {return -1;}
+         int m = a + ((b - a) / 2);
+         if (comparador.compare(elemento, arreglo[m]) == 0) {return m;}
+         else if (comparador.compare(elemento, arreglo[m]) < 0){
+             return busquedaBinaria(arreglo, elemento, comparador, a, m-1);
+         }
+         else{
+             return busquedaBinaria(arreglo, elemento, comparador, m+1, b);
+         }
      }
  
      /**
